import streamlit as st
import os
from typing_extensions import List, TypedDict

import fitz
import re

# Langchain libraries
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_core.vectorstores import InMemoryVectorStore
from langchain_groq import ChatGroq
from langchain_huggingface import HuggingFaceEmbeddings
from langgraph.graph import START, StateGraph
from langchain import hub

# Load credentials global environnement
GROQ_API_KEY = st.secrets['general']['GROQ_API_KEY']
os.environ['LANGCHAIN_API_KEY'] = st.secrets['general']['LANGCHAIN_API_KEY']
os.environ['LANGCHAIN_TRACING_V2'] = st.secrets['general']['LANGCHAIN_TRACING_V2']


def clean_text(text):
    """
    Cleans the extracted text from unwanted characters and extra spaces.

    Args:
        text: The extracted raw text from the PDF.

    Returns:
        str: The cleaned text.
    """
    # Remove non-printable characters (including newlines, tabs, etc.)
    text = re.sub(r'\s+', ' ', text)  # Replace multiple whitespace with a single space
    text = re.sub(r'[^\x20-\x7E]', '', text)  # Remove non-ASCII characters (optional, adjust as needed)

    # Additional cleaning steps (e.g., removing page numbers, unwanted symbols)
    text = text.replace('\n', ' ').replace('\r', '')  # Remove line breaks

    # Strip leading and trailing spaces
    text = text.strip()

    return text

def get_from_pdf(pdf_file):
    """
    Extracts text from uploaded PDF using PyMuPDF.

    Args:
        pdf_file: A file object containing the uploaded PDF.

    Returns:
        str: The cleaned text extracted from the PDF.
    """
    try:
        doc = fitz.open(stream=pdf_file.read(), filetype="pdf")
        text = ""
        page_text = ""
        for page in doc:
            page_text += page.get_text("text")


        cleaned_text = clean_text(page_text)
        text += cleaned_text
        return text
    except Exception as e:
        st.error(e)
        st.error("Load document failed. Try another one please.")
        return None

def process_and_answer(question, document_text):
    """
    Processes the uploaded PDF, performs retrieval and generation steps,
    and returns the answer to the user's question.

    Args:
        question: str, The user's question.

    Returns:
        str: The answer generated by the language model.
    """


    if document_text is not None:

        # Split the text into smaller chunks
        text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
        chunks = text_splitter.split_text(document_text)

        # start embedding
        llm = ChatGroq(model="llama-3.3-70b-versatile", api_key=GROQ_API_KEY)
        embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-mpnet-base-v2")

        vector_store = InMemoryVectorStore(embeddings)
        vector_store.add_texts(chunks)

        prompt = hub.pull("rlm/rag-prompt")

        class State(TypedDict):
            question: str
            context: str
            answer: str

        def retrieve(state):
            retrieve_text = vector_store.similarity_search(state['question'])
            return {'context': retrieve_text}

        def generate(state):
            text_content = state['context']
            message = prompt.invoke({'question': state['question'], 'context': text_content})
            response = llm.invoke(message)
            return {'answer': response.content}

        graph_builder = StateGraph(State).add_sequence([retrieve, generate])
        graph_builder.add_edge(START, "retrieve")
        graph = graph_builder.compile()

        result = graph.invoke({"question": question})
        return result["answer"]
    else:
        return "Please upload a contract PDF."


def main():
    """
    Streamlit app entry point.
    """
    st.title("Document Question Answering")
    st.write('### Upload your pdf document and then ask any question.')
    # Get text from uploaded PDF
    uploaded_file = st.file_uploader("Upload Contract PDF", type="pdf")


    if uploaded_file:
        document_text = get_from_pdf(uploaded_file)
        user_question = st.text_input("Question: ")
        if user_question:
            answer = process_and_answer(user_question, document_text)
            st.write(f"Answer: {answer}")


if __name__ == "__main__":
    test = 'writting text'
    main()
